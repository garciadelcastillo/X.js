/*! Ontology.js v0.0.1 | (c) 2015 Jose Luis Garcia del Castillo */
var is=function(r){if(1!=arguments.length)return console.warn("Ontology.js: invalid arguments for is()"),void 0;var n={"null":"nullObj",undefined:"undefinedObj",nan:"NaNObj","boolean":"boolean",number:"number","function":"function",string:"string",array:"array",object:"object"},t=function(r,n,o,i){if(r===n)return 0!==r||1/r===1/n;if(null==r||null==n)return r===n;var a=toString.call(r);if(a!==toString.call(n))return!1;switch(a){case"[object RegExp]":case"[object String]":return""+r==""+n;case"[object Number]":return+r!==+r?+n!==+n:0===+r?1/+r===1/n:+r===+n;case"[object Date]":case"[object Boolean]":return+r===+n}var u="[object Array]"===a;if(!u){if("object"!=typeof r||"object"!=typeof n)return!1;var s=r.constructor,f=n.constructor;if(s!==f&&!(is(s).function()&&s instanceof s&&is(f).function()&&f instanceof f)&&"constructor"in r&&"constructor"in n)return!1}o=o||[],i=i||[];for(var l=o.length;l--;)if(o[l]===r)return i[l]===n;if(o.push(r),i.push(n),u){if(l=r.length,l!==n.length)return!1;for(;l--;)if(!t(r[l],n[l],o,i))return!1}else{var c,g=e(r);if(l=g.length,e(n).length!==l)return!1;for(;l--;)if(c=g[l],!has(n).property(c)||!t(r[c],n[c],o,i))return!1}return o.pop(),i.pop(),!0},e=function(r){if(!is(r).object())return[];if(Object.keys)return Object.keys(r);var n=[];for(var t in r)has(r).property(t)&&n.push(t);return n},o={};return o.arg=r,o.nullObj=function(){return null===this.arg},o.nul=o.nullObj,o.undefinedObj=function(){return void 0===this.arg},o.undef=o.undefinedObj,o.NaNObj=function(){return this.number()&&this.arg!==+this.arg},o.nan=o.NaNObj,o.boolean=function(){return this.arg===!0||this.arg===!1||"[object Boolean]"===toString.call(this.arg)},o.number=function(){return"[object Number]"===toString.call(this.arg)},o.function=function(){return"[object Function]"===toString.call(this.arg)},o.string=function(){return"[object String]"===toString.call(this.arg)},o.array=function(){return Array.isArray?Array.isArray(this.arg):"[object Array]"===toString.call(this.arg)},o.object=function(){return"[object Object]"===Object.prototype.toString.call(this.arg)},o.primitive=function(){return this.either("boolean","number","string","null","undefined")},o.ofType=function(r){return n[r]?this[n[r]]():(console.warn('Ontology.js: unrecognized data type "'+r+'" for is().ofType()'),!1)},o.type=o.ofType,o.notOfType=function(r){return n[r]?!this[n[r]]():(console.warn('Ontology.js: unrecognized data type "'+r+'" for is().not()'),!0)},o.notType=o.notOfType,o.either=function(){for(var r=arguments,t=r.length,e=0;t>e;e++){if(!n[r[e]])return console.warn('Ontology.js: unrecognized data type "'+r[e]+'" for is().either()'),!1;if(this[n[r[e]]]())return!0}return!1},o.neither=function(){for(var r=arguments,t=r.length,e=0;t>e;e++){if(!n[r[e]])return console.warn('Ontology.js: unrecognized data type "'+r[e]+'" for is().neither()'),!1;if(this[n[r[e]]]())return!1}return!0},o.equalTo=function(r){return this.arg==r},o.equal=o.equalTo,o.notEqualTo=function(r){return this.arg!=r},o.notEqual=o.notEqualTo,o.identicalTo=function(r){return this.arg===r},o.identical=o.identicalTo,o.strictEqualTo=o.identicalTo,o.strictEqual=o.identicalTo,o.notIdenticalTo=function(r){return this.arg!==r},o.notIdentical=o.notIdenticalTo,o.deepIdenticalTo=function(r){return t(this.arg,r)},o.deepIdentical=o.deepIdenticalTo,o},are=function(r){if(1!=arguments.length)return console.warn("Ontology.js: invalid arguments for are()"),void 0;if(!is(r).array())return console.warn("Ontology.js: must pass an Array as argument for are()"),void 0;var n={"null":"nullObjs",undefined:"undefinedObjs",nan:"NaNObjs","boolean":"booleans",number:"numbers","function":"functions",string:"strings",array:"arrays",object:"objects"},t={};t.args=r;var e=r.length;return t.nullObjs=function(){for(var r=0;e>r;r++)if(!is(this.args[r]).nullObj())return!1;return!0},t.nuls=t.nullObjs,t.nulls=t.nullObjs,t.undefinedObjs=function(){for(var r=0;e>r;r++)if(!is(this.args[r]).undefinedObj())return!1;return!0},t.undef=t.undefinedObjs,t.NaNObjs=function(){for(var r=0;e>r;r++)if(!is(this.args[r]).NaNObj())return!1;return!0},t.nans=t.NaNObjs,t.NaNs=t.NaNObjs,t.booleans=function(){for(var r=0;e>r;r++)if(!is(this.args[r]).boolean())return!1;return!0},t.numbers=function(){for(var r=0;e>r;r++)if(!is(this.args[r]).number())return!1;return!0},t.functions=function(){for(var r=0;e>r;r++)if(!is(this.args[r]).function())return!1;return!0},t.strings=function(){for(var r=0;e>r;r++)if(!is(this.args[r]).string())return!1;return!0},t.arrays=function(){for(var r=0;e>r;r++)if(!is(this.args[r]).array())return!1;return!0},t.objects=function(){for(var r=0;e>r;r++)if(!is(this.args[r]).object())return!1;return!0},t.primitives=function(){return this.either("boolean","number","string","null","undefined")},t.ofType=function(r){if(!n[r])return console.warn('Ontology.js: unrecognized data type "'+r+'" for are().ofTypes()'),!1;for(var t=0;e>t;t++)if(!is(this.args[t]).ofType(r))return!1;return!0},t.type=t.ofType,t.notOfType=function(r){if(!n[r])return console.warn('Ontology.js: unrecognized data type "'+r+'" for are().not()'),!0;for(var t=0;e>t;t++)if(is(this.args[t]).ofType(r))return!1;return!0},t.notType=t.notOfType,t.either=function(){for(var r=arguments,t=r.length,o=0;t>o;o++)if(!n[r[o]])return console.warn('Ontology.js: unrecognized data type "'+r[o]+'" for are().either()'),!1;for(var o=0;e>o;o++){for(var i=!1,a=0;t>a;a++)if(is(this.args[o]).ofType(r[a])){i=!0;break}if(!i)return!1}return!0},t.neither=function(){for(var r=arguments,t=r.length,o=0;t>o;o++)if(!n[r[o]])return console.warn('Ontology.js: unrecognized data type "'+r[o]+'" for are().either()'),!1;for(var o=0;e>o;o++){for(var i=!1,a=0;t>a;a++)if(is(this.args[o]).ofType(r[a])){i=!0;break}if(i)return!1}return!0},t.equalTo=function(r){var n=r.length;if(e!=n)return!1;for(var t=0;e>t;t++)if(this.args[t]!=r[t])return!1;return!0},t.equal=t.equalTo,t.notEqualTo=function(r){var n=r.length;if(e!=n)return!0;for(var t=0;e>t;t++)if(this.args[t]==r[t])return!1;return!0},t.notEqual=t.notEqualTo,t.identicalTo=function(r){var n=r.length;if(e!=n)return!1;for(var t=0;e>t;t++)if(this.args[t]!==r[t])return!1;return!0},t.identical=t.identicalTo,t.notIdenticalTo=function(r){var n=r.length;if(e!=n)return!0;for(var t=0;e>t;t++)if(this.args[t]===r[t])return!1;return!0},t.notIdentical=t.notIdenticalTo,t.deepIdenticalTo=function(r){var n=r.length;if(e!=n)return!1;for(var t=0;e>t;t++)if(!is(this.args[t]).deepIdenticalTo(r[t]))return!1;return!0},t.deepIdentical=t.deepIdenticalTo,t},has=function(r){if(1!=arguments.length)return console.warn("Ontology.js: invalid arguments for has()"),void 0;var n={};return n.arg=r,n.property=function(r){return null!=this.arg&&Object.prototype.hasOwnProperty.call(this.arg,r)},n.prop=n.property,n.key=n.property,n},have=function(r){if(1!=arguments.length)return console.warn("Ontology.js: invalid arguments for have()"),void 0;if(!is(r).array())return console.warn("Ontology.js: must pass an Array as argument for have()"),void 0;var n={};n.args=r;var t=r.length;return n.property=function(r){for(var n=0;t>n;n++)if(null==this.args[n]||!Object.prototype.hasOwnProperty.call(this.args[n],r))return!1;return!0},n.prop=n.property,n.key=n.property,n};if("object"!=typeof exports||void 0===exports);else{var ont=module.exports={};ont.is=is,ont.are=are,ont.has=has,ont.have=have}